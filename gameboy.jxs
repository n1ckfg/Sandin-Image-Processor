<jittershader name="Gameboy">
    <description>Retro digital video effect.</description>

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX"/>
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX"/>
	<param name="position" type="vec3" state="POSITION"/>
	<param name="texcoord" type="vec2" state="TEXCOORD"/>
	<param name="color" type="vec4" state="COLOR"/>

    <param name="tex0" type="int" default="0"/>
    <param name="matrixSize" type="int" default="3"/>

    <language name="glsl" version="1.5">
		<bind param="modelViewProjectionMatrix" program="vp"/>
		<bind param="textureMatrix0" program="vp"/>
		<bind param="position" program="vp"/>
		<bind param="texcoord" program="vp"/>
		<bind param="color" program="vp"/>

        <bind param="tex0" program="fp"/>
        <bind param="matrixSize" program="fp"/>

		<program name="vp" type="vertex"> 
<![CDATA[
#version 330 core

in vec3 position;
in vec2 texcoord;
in vec4 color;

out jit_PerVertex {
	vec2 texcoord;
	vec4 color;
} jit_out;

uniform mat4 modelViewProjectionMatrix;
uniform mat4 textureMatrix0;

void main(void) {
	gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
	jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
	jit_out.color = color;
}
]]>
		</program>
		
        <program name="fp" type="fragment">
<![CDATA[ 
#version 330 core 

in jit_PerVertex {
    vec2 texcoord;
	vec4 color;
} jit_in;
layout (location = 0) out vec4 outColor;
			
uniform sampler2DRect tex0; 
uniform int matrixSize; // = 3;

const vec3 white = vec3(0.937, 0.937, 0.937);
const vec3 lightGray = vec3(0.686, 0.686, 0.686);
const vec3 darkGray = vec3(0.376, 0.376, 0.376);
const vec3 black = vec3(0.066, 0.066, 0.066);

const mat3 ditherPattern = mat3(
    0.0, 0.5, 0.125,
    0.75, 0.25, 0.875,
    0.1875, 0.6875, 0.0625
);

float getLuminance(vec3 col) {
    return dot(col, vec3(0.299, 0.587, 0.114));
}

void main(void) {
    vec2 uv = jit_in.texcoord;
    
    vec3 texColor = texture(tex0, uv).xyz;
    
    float texGray = getLuminance(texColor);
    int paletteIndex = int(texGray * 15.0);
    //int x = int(fragCoord.x) % 3;
    //int y = int(fragCoord.y) % 3;
    int x = int(uv.x) % matrixSize;
    int y = int(uv.y) % matrixSize;
    int ditherIndex = int(ditherPattern[x][y] * 15.0);
    paletteIndex = min(paletteIndex + ditherIndex, 15);
    vec3 ditheredColor = vec3(
        float((paletteIndex & 4) >> 2),
        float((paletteIndex & 2) >> 1),
        float(paletteIndex & 1)
    );

    float texGray2 = texGray - 0.15 * getLuminance(ditheredColor);

    vec3 color;
    if (texGray2 <= 0.25) {
        color = black;
    } else if (texGray2 <= 0.5) {
        color = darkGray;
    } else if (texGray2 <= 0.75) {
        color = lightGray;
    } else {
        color = white;
    }

    outColor = vec4(color, 1.0);
}
]]>
        </program>
    </language>
</jittershader>