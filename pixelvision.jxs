<jittershader name="Pixelvision">
    <description>Analog video effect.</description>

	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX"/>
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX"/>
	<param name="position" type="vec3" state="POSITION"/>
	<param name="texcoord" type="vec2" state="TEXCOORD"/>
	<param name="color" type="vec4" state="COLOR"/>

    <param name="tex0" type="int" default="0"/>
    <param name="gamma" type="float" default="1.2"/>
    <param name="posterizeLevels" type="float" default="90.0"/>
    <param name="texelSize" type="vec2" default="0.008 0.011"/>

    <language name="glsl" version="1.5">
		<bind param="modelViewProjectionMatrix" program="vp"/>
		<bind param="textureMatrix0" program="vp"/>
		<bind param="position" program="vp"/>
		<bind param="texcoord" program="vp"/>
		<bind param="color" program="vp"/>

        <bind param="tex0" program="fp"/>
        <bind param="gamma" program="fp"/>
        <bind param="posterizeLevels" program="fp"/>
        <bind param="texelSize" program="fp"/>

		<program name="vp" type="vertex"> 
<![CDATA[
#version 330 core

in vec3 position;
in vec2 texcoord;
in vec4 color;

out jit_PerVertex {
	vec2 texcoord;
	vec4 color;
} jit_out;

uniform mat4 modelViewProjectionMatrix;
uniform mat4 textureMatrix0;

void main(void) {
	gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
	jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
	jit_out.color = color;
}
]]>
		</program>
		
        <program name="fp" type="fragment">
<![CDATA[ 
#version 330 core 

in jit_PerVertex {
	vec2 texcoord;
	vec4 color;
} jit_in;
layout (location = 0) out vec4 outColor;
			
uniform sampler2DRect tex0; 
uniform float gamma; // = 1.2;
uniform vec2 texelSize; // = vec2(1.0/120.0, 1.0/90.0); // = vec2(0.008, 0.011);
uniform float posterizeLevels; // = 90;

const float sigma = 2.0;
const float kernel[5] = float[](0.10, 0.20, 0.40, 0.20, 0.10);

float getLuminance(vec3 col) {
    return dot(col, vec3(0.299, 0.587, 0.114));
}

// https://github.com/dmnsgn/glsl-tone-map
float tone_map_aces(float x) {
  const float a = 2.51;
  const float b = 0.03;
  const float c = 2.43;
  const float d = 0.59;
  const float e = 0.14;
  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);
}

float map(float s, float a1, float a2, float b1, float b2) {
    return b1 + (s - a1) * (b2 - b1) / (a2 - a1);
}

vec3 adjustGamma(vec3 color, float gamma) {
    return pow(color, vec3(1.0 / gamma));
}

void main(void) {
    vec2 uv = jit_in.texcoord;
    
    vec3 centerColor = texture(tex0, uv).xyz;   
    vec3 leftColor = texture(tex0, uv - vec2(texelSize.x, 0.0)).xyz;
    vec3 rightColor = texture(tex0, uv + vec2(texelSize.x, 0.0)).xyz;
    vec3 topColor = texture(tex0, uv + vec2(0.0, texelSize.y)).xyz;
    vec3 bottomColor = texture(tex0, uv - vec2(0.0, texelSize.y)).xyz;

    vec3 blurredColor = topColor * kernel[0] + leftColor * kernel[1] + centerColor * kernel[2] + rightColor * kernel[3] + bottomColor * kernel[4];
    vec3 sharpenedColor = blurredColor * 5.0 - (leftColor + rightColor + topColor + bottomColor);
    vec3 posterizedColor = floor(sharpenedColor * posterizeLevels) / posterizeLevels;

    float luminance0 = tone_map_aces(getLuminance(posterizedColor));
    float luminance1 = pow(map(luminance0, 0.05, 0.95, 0.0, 1.0), 1.0 / gamma);

    outColor = vec4(luminance1, luminance1, luminance1, 1.0);
}
]]>
        </program>
    </language>
</jittershader>